class Solution {
public:
    int n;
    void floydWarshall(vector<vector<int>> &d){
        for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(d[i][k]!=1e9 && d[k][j]!=1e9 && (d[i][k]+d[k][j])<d[i][j]){
                        d[i][j]=d[i][k]+d[k][j];
                    }
                }
            }
        }
        return ;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int d) {
        this->n=n;
        vector<vector<int>> g(n,vector<int>(n,1e9));
        for(int i=0;i<n;i++)g[i][i]=0;
        for(auto i: edges){
            g[i[0]][i[1]]=i[2];
            g[i[1]][i[0]]=i[2];
        }
        floydWarshall(g);
        int city=0,mn=1e9;
        for(int i=0;i<n;i++){
            int ans=0;
            for(int j=0;j<n;j++){
                if(g[i][j]<=d)ans++;
            }
            if(ans<=mn){
                city=i;
                mn=ans;
            }
        }
        return city;
    }
};
