typedef long long ll;
const ll mod = 1e9+7;
const ll maxn = 1e5 + 1;
ll fac[maxn], invfact[maxn];
ll power(ll x, ll y)
{
    ll res = 1;
    x = x % mod;
    while (y > 0)
    {
        if (y & 1)
            res = (res * x) % mod;
        y = y >> 1;
        x = (x * x) % mod;
    }
    return res%mod;
}
ll modInverse(ll n)
{
    return power(n, mod - 2);
}
ll NCR(ll n, ll r, ll p = mod)
{
    if (r < 0 || n < 0)
        assert(false);
    if (n < r)
        return 0;
    if (r == 0 || r == n)
        return 1;
    return ((fac[n] * invfact[r] % mod)%mod * invfact[n - r] % mod)%mod;
}
void compu(ll n)
{
    fac[0] = 1, invfact[0] = 1;
    for (ll i = 1; i < n; i++)
    {
        fac[i] = (fac[i - 1] * i) % mod;
        invfact[i] = modInverse(fac[i]);
    }
}
class Solution {
public:
    int countKSubsequencesWithMaxBeauty(string s, int k) {
        map<int,int> f;
        unordered_map<char,int> map;
        for(auto i:s){
            map[i]++;
        }
        if(k>map.size())return 0;
        for(auto [k,v]:map){
            f[v]++;
        }
        int ans=0;
        for(auto it=f.rbegin();it!=f.rend() && k>0;it++){
            int key=it->first,val=it->second;
            if(k>=val){
                if(ans==0)ans=1;
                ans=(ans*1LL*power(key,val))%mod;
                k-=val;
            }else{
                if(ans==0)ans=1;
                compu(val+10);
                ans=(ans*(power(key,k)*NCR(val,k)%mod)%mod)%mod;
                break; 
            }
        }
        return ans;
    }
};
